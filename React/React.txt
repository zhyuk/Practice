{Day 1}
#React
- Naver Vibe, Flipkart, instagram 등 페이지 전환이 새로고침없이 부드럽게 동작하는 사이트들을 Single Page Application이라고 합니다.
* Single Page Application
        - html 파일은 1개만 사용 
        - 다른 페이지를 보여주고 싶을 때 html 부분만 갈아치워서 보여준다. ==> 따라서 부드럽게 동작함.

- html을 함수, array, object 이런 곳에서 보관,재사용이 가능하여 큰 프로젝트일수록 html 관리가 편리하다.

- 리액트는 App.js가 html의 index.html과 같음.
    
# JSX 언어 : .js파일에서 html을 쉽게 작성하도록 사용하는 html 대용품
    원래 리액트에서 <div>만드는 방법 : React.createElement('div', null, 'Hello World')로 작성해야함. -> 이것을 편리하게 도와주는 것이 JSX언어임

# JSX 문법]
    1. class 넣을 땐 className으로 작성. 
    => class는 클래스 선언하는 것과 동일하기 때문에 겹침.

    2. 변수넣을 땐 {}(중괄호) 사용. = 데이터바인딩은 {}(중괄호) 사용
    => 변수에 있는 자료를 html에 넣고싶을 때, JS
    let post = '강남 우동 맛집';
    document.getElementByTagName('p')[0].innerHTML = post;
    리액트는 그냥 <p>{post}</p>처럼 원하는 자리에 넣으면 됨.

    3. style 넣을 땐 style={} 사용. 다만 오브젝트 자료형으로 넣어줘야함.
    * 속성은 카멜기법으로 작성.
    => <p style={{color:'red', fontSize: '16px'}}>{post}</p>


* return 소괄호 내에는 병렬로 태그 2개 이상 기입금지. 딱 하나의 자식요소만 있어야함.

# State
    - 자료를 잠깐 저장할 때 사용
    [사용법]
    1. import {useState} from 'react'; 입력
    2. let [a,b] = useState(잠깐 저장하고 싶은 값);
        a : state에 보관했던 값
        b : state 변경을 도와주는 함수

    * 자바스크립트의 Destructuring 문법
    let num = [1, 2];
    let [a, c] = [1, 2]; // a = 1, c = 2  -> Destructuring 문법
    let a = num[0]; // a = 1
    let c = num[1]; // c = 2

    State 쓰는 이유 ? 
        : 일반 변수는 값이 변경되면 html에 자동으로 반영안됨. -> State는 값이 변경되면 자동으로 html이 재렌더링됨.
    ==> 값이 자주 변경되는 상품명, 글제목, 가격 등의 데이터를 다룰 때 State로 처리하는 것이 좋다. 로고의 이름은 바꿀 일이 거의 없기 때문에 굳이 State 처리할 필요가 없다.


{Day 2}
    맨위에 /* eslint-disable */ 작성 시 터미널 창에 warnig 메세지 없앨 수 있음.
    일반 변수의 값을 +1 하는 방법 : value += 1; 또는 value +1 사용하지만, state 변경은 이렇게 하면 안됨.
    
    * state 값 변경하는 방법
        1. state 선언 시 [](대괄호)에 변경될 때 사용할 변수명을 기술해야 함. => 예) let [변수명, 변경될 때 사용할 변수명] = useState(0);
        2. 변경될 때 사용할 변수명을 사용해야만 html 재렌더링이 됨.
        3. 변경이 필요한 부분에서 변경될 때 사용할 변수명(변경될 값);으로 사용. => 예) valCng(1);

        [예시]
        let [like, likeCng] = useState(0);
        <span>{like}</span> => like 대신 0 출력됨.
        <span onClick={()=>{likeCng(1)}}>{like}</span> => span 태그 클릭 시 0 대신 1로 변경됨.

    * state가 배열 객체일 때, 값을 변경하는 방법.
        ** array/object를 다룰 때는 원본을 보존하는 게 좋다. 
        1. 변수를 만들어서 값을 변경할 변수의 값을 복사함.(원본훼손 방지) => 예)let copy = 글제목;
        2. 새로 만든 변수를 통해 내가 값을 변경할 위치의 값 변경 => 예) copy[0] = '여자 코트 추천';
        3. 기존 변수의 변경할 때 사용하는 변수를 사용해 값 변경 => 예) 글제목변경(copy);
        하지만, 이렇게 하면 될 것 같지만 값 변경이 되지않음.
        ==> 동작원리를 이해해야함
        [state변경함수 특징]
        - 기존 state와 신규 state의 값이 동일한 경우 변경하지 않음.

        [array/obejct의 특징]
        - array/obejct 담은 변수에는 화살표만 저장됨(주소값만 담아둠.) => 객체임.
        [예시] :
            글제목[0] = '여자 코트 추천'; // 값이 변경되긴 하지만, 주소값은 동일함.
            글제목변경(글제목); // 주소값이 동일하기 때문에 state가 동일한 값이라고 인식해 값을 변경하지 않음.

            - 이 경우도 새로 변수를 만들었지만 글제목 변수의 값을 그대로 복사하기 때문에 state가 동일한 값이라고 인식해 값 변경하지 않음.
            let copy = 글제목;
            copy[0] = '여자 코트 추천';
            글제목변경(copy); 
            ==> 따라서 [...글제목] 문법을 사용해야함 
                [...변수명] : 주소값을 새로 변경한다는 문법임. 괄호를 벗기고 새로 씌워 새로운 주소값을 가짐
    [정리]
    - 값을 변경할 state가 array/object인 경우, 카피본을 만들어서 수정해야한다.(원본훼손 방지)

    #html을 컴포넌트를 이용해 축약하기
        - 다른 사람 혹은 미래의 나도 코드만 보고도 이해하기 쉽다.

        [컴포넌트 만드는 방법]
        1. function을 만들기 => 단, function 내부에 만들면 안되고 첫 글자를 대문자로 기술해야함
        2. return() 안에 html 담기
        3. <함수명></함수명> 쓰기

        [예시]
        // 축약하고 싶은 html 태그들임.
        <div className='modal'>
            <h4>제목</h4>
            <p>날짜</p>
            <p>상세내용</p>
        </div>

        // 함수를 다른 함수 외부에 생성하고 첫 글자를 대문자로 기술. return()(소괄호) 내부에 축약할 html 모두 기술
        function Modal(){
            return(
                <div className='modal'>
                    <h4>제목</h4>
                    <p>날짜</p>
                    <p>상세내용</p>
                </div>
            );
        };

        // 필요한 곳에서 함수명 호출.
        <Modal></Modal>

        [참고사항]
            - return() 안에는 하나의 html 태그가 존재하는 것이 권장.
            <div className='modal'><h4>제목</h4><p>날짜</p>p>상세내용</p></div> ==> (O)
            <div className='modal'><h4>제목</h4><p>날짜</p><p>상세내용</p></div><div></div> ==> (X)
            => 이럴 때는 하나의 큰 태그로 감싸줘야 함.
            <div><div className='modal'><h4>제목</h4><p>날짜</p><p>상세내용</p></div><div></div></div>  ==> 이런 의미없는 div 태그 대신 <></>로 사용 가능.
            예) <><div className='modal'><h4>제목</h4><p>날짜</p><p>상세내용</p></div><div></div></>

    - 컴포넌트로 만들면 좋은 경우
        1. 반복적인 html을 축약할 때 => 예) 게시판의 글 html 구조처럼 반복되는 요소
        2. 큰 페이지들 => 페이지 전환할 때 큰 페이지 하나를 담아두면 좋음.
        3. 자주 변경되는 것들 => 자주 변경되는 UI들은 컴포넌트로 사용하는 것이 성능상 좋을 수도 있음

    - 컴포넌트의 단점 : state를 가져다쓸 때 문제생김. => state는 다른 함수의 내부에 존재하기 때문에

    [참고]
        컴포넌트 만드는 문법 2 : 변수를 만들고 변수에 함수를 담아둘 수도 있음. 
        [예시]
        const Modal = () => {
            return(html 구조);
        }
        // 상수는 값을 변경할 수 없어 수정하게 되면 에러메세지를 띄워줘 실수를 방지할 수 있음.

